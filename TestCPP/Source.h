/*
This file has been generated by IDA.
It contains local type definitions from
the type library 'sai2'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct HBRUSH__;
struct HWND__;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct HDC__;
struct tagWNDCLASSEXW;
struct HINSTANCE__;
struct HICON__;
struct _RUNTIME_FUNCTION;
struct tagMODULEENTRY32W;
struct tagBITMAPINFO;
struct tagXFORM;
struct tagMENUITEMINFOW;
struct HMENU__;
struct HBITMAP__;
struct tagWINDOWPLACEMENT;
struct _SHFILEINFOW;
union _LARGE_INTEGER;
union _ULARGE_INTEGER;
struct $C69BB3475790555A1270C1E06836585E;
struct _EXCEPTION_RECORD;
struct _iobuf;
struct threadlocaleinfostruct;
struct tagSCROLLINFO;

/* 1 */
struct _GUID
{
	unsigned __int32 Data1;
	unsigned __int16 Data2;
	unsigned __int16 Data3;
	unsigned __int8 Data4[8];
};

/* 2 */
typedef struct _GUID GUID;

/* 4 */
typedef unsigned __int32 DWORD;

/* 5 */
typedef unsigned int UINT;

/* 6 */
typedef HBRUSH__ *HBRUSH;

/* 8 */
typedef unsigned __int64 ULONG_PTR;

/* 3 */
struct tagMENUINFO
{
	DWORD cbSize;
	DWORD fMask;
	DWORD dwStyle;
	UINT cyMax;
	HBRUSH hbrBack;
	DWORD dwContextHelpID;
	ULONG_PTR dwMenuData;
};

/* 7 */
struct HBRUSH__
{
	int unused;
};

/* 10 */
typedef HWND__ *HWND;

/* 13 */
typedef unsigned __int64 UINT_PTR;

/* 12 */
typedef UINT_PTR WPARAM;

/* 15 */
typedef __int64 LONG_PTR;

/* 14 */
typedef LONG_PTR LPARAM;

/* 18 */
typedef __int32 LONG;

/* 17 */
struct tagPOINT
{
	LONG x;
	LONG y;
};

/* 16 */
typedef tagPOINT POINT;

/* 9 */
struct tagMSG
{
	HWND hwnd;
	UINT message;
	WPARAM wParam;
	LPARAM lParam;
	DWORD time;
	POINT pt;
};

/* 11 */
struct HWND__
{
	int unused;
};

/* 20 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 25 */
typedef void *HANDLE;

/* 19 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
	PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
	LONG LockCount;
	LONG RecursionCount;
	HANDLE OwningThread;
	HANDLE LockSemaphore;
	ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 22 */
typedef unsigned __int16 WORD;

/* 24 */
struct _LIST_ENTRY
{
	_LIST_ENTRY *Flink;
	_LIST_ENTRY *Blink;
};

/* 23 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 21 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
	WORD Type;
	WORD CreatorBackTraceIndex;
	struct _RTL_CRITICAL_SECTION_DEBUG::_RTL_CRITICAL_SECTION *CriticalSection;
	LIST_ENTRY ProcessLocksList;
	DWORD EntryCount;
	DWORD ContentionCount;
	DWORD Flags;
	WORD CreatorBackTraceIndexHigh;
	WORD SpareWORD;
};

/* 27 */
typedef HDC__ *HDC;

/* 29 */
typedef int BOOL;

/* 31 */
struct tagRECT
{
	LONG left;
	LONG top;
	LONG right;
	LONG bottom;
};

/* 30 */
typedef tagRECT RECT;

/* 32 */
typedef unsigned __int8 BYTE;

/* 26 */
struct tagPAINTSTRUCT
{
	HDC hdc;
	BOOL fErase;
	RECT rcPaint;
	BOOL fRestore;
	BOOL fIncUpdate;
	BYTE rgbReserved[32];
};

/* 28 */
struct HDC__
{
	int unused;
};

/* 33 */
typedef tagWNDCLASSEXW WNDCLASSEXW;

/* 36 */
typedef LONG_PTR LRESULT;

/* 35 */
typedef LRESULT(__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 37 */
typedef HINSTANCE__ *HINSTANCE;

/* 39 */
typedef HICON__ *HICON;

/* 41 */
typedef HICON HCURSOR;

/* 44 */
typedef unsigned __int16 wchar_t;

/* 43 */
typedef wchar_t WCHAR;

/* 42 */
typedef const WCHAR *LPCWSTR;

/* 34 */
struct tagWNDCLASSEXW
{
	UINT cbSize;
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCWSTR lpszMenuName;
	LPCWSTR lpszClassName;
	HICON hIconSm;
};

/* 38 */
struct HINSTANCE__
{
	int unused;
};

/* 40 */
struct HICON__
{
	int unused;
};

/* 46 */
typedef unsigned __int64 DWORD64;

/* 49 */
typedef _RUNTIME_FUNCTION *PRUNTIME_FUNCTION;

/* 48 */
struct _UNWIND_HISTORY_TABLE_ENTRY
{
	DWORD64 ImageBase;
	PRUNTIME_FUNCTION FunctionEntry;
};

/* 47 */
typedef _UNWIND_HISTORY_TABLE_ENTRY UNWIND_HISTORY_TABLE_ENTRY;

/* 45 */
struct _UNWIND_HISTORY_TABLE
{
	DWORD Count;
	BYTE LocalHint;
	BYTE GlobalHint;
	BYTE Search;
	BYTE Once;
	DWORD64 LowAddress;
	DWORD64 HighAddress;
	UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};

/* 50 */
struct _RUNTIME_FUNCTION
{
	DWORD BeginAddress;
	DWORD EndAddress;
	DWORD UnwindData;
};

/* 52 */
typedef void *PVOID;

/* 53 */
typedef ULONG_PTR SIZE_T;

/* 51 */
struct _MEMORY_BASIC_INFORMATION
{
	PVOID BaseAddress;
	PVOID AllocationBase;
	DWORD AllocationProtect;
	SIZE_T RegionSize;
	DWORD State;
	DWORD Protect;
	DWORD Type;
};

/* 54 */
typedef tagMODULEENTRY32W MODULEENTRY32W;

/* 56 */
typedef HINSTANCE HMODULE;

/* 55 */
struct tagMODULEENTRY32W
{
	DWORD dwSize;
	DWORD th32ModuleID;
	DWORD th32ProcessID;
	DWORD GlblcntUsage;
	DWORD ProccntUsage;
	BYTE *modBaseAddr;
	DWORD modBaseSize;
	HMODULE hModule;
	WCHAR szModule[256];
	WCHAR szExePath[260];
};

/* 64 */
typedef unsigned __int64 ULONGLONG;

/* 65 */
typedef __int64 LONGLONG;

/* 63 */
struct __declspec(align(16)) _M128A
{
	ULONGLONG Low;
	LONGLONG High;
};

/* 62 */
typedef _M128A M128A;

/* 61 */
struct __declspec(align(16)) _XSAVE_FORMAT
{
	WORD ControlWord;
	WORD StatusWord;
	BYTE TagWord;
	BYTE Reserved1;
	WORD ErrorOpcode;
	DWORD ErrorOffset;
	WORD ErrorSelector;
	WORD Reserved2;
	DWORD DataOffset;
	WORD DataSelector;
	WORD Reserved3;
	DWORD MxCsr;
	DWORD MxCsr_Mask;
	M128A FloatRegisters[8];
	M128A XmmRegisters[16];
	BYTE Reserved4[96];
};

/* 60 */
typedef _XSAVE_FORMAT XSAVE_FORMAT;

/* 59 */
typedef XSAVE_FORMAT XMM_SAVE_AREA32;

/* 66 */
struct _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414
{
	M128A Header[2];
	M128A Legacy[8];
	M128A Xmm0;
	M128A Xmm1;
	M128A Xmm2;
	M128A Xmm3;
	M128A Xmm4;
	M128A Xmm5;
	M128A Xmm6;
	M128A Xmm7;
	M128A Xmm8;
	M128A Xmm9;
	M128A Xmm10;
	M128A Xmm11;
	M128A Xmm12;
	M128A Xmm13;
	M128A Xmm14;
	M128A Xmm15;
};

/* 58 */
union _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB
{
	XMM_SAVE_AREA32 FltSave;
	struct
	{
		M128A Header[2];
		M128A Legacy[8];
		M128A Xmm0;
		M128A Xmm1;
		M128A Xmm2;
		M128A Xmm3;
		M128A Xmm4;
		M128A Xmm5;
		M128A Xmm6;
		M128A Xmm7;
		M128A Xmm8;
		M128A Xmm9;
		M128A Xmm10;
		M128A Xmm11;
		M128A Xmm12;
		M128A Xmm13;
		M128A Xmm14;
		M128A Xmm15;
	};
};

/* 57 */
struct __declspec(align(16)) _CONTEXT
{
	DWORD64 P1Home;
	DWORD64 P2Home;
	DWORD64 P3Home;
	DWORD64 P4Home;
	DWORD64 P5Home;
	DWORD64 P6Home;
	DWORD ContextFlags;
	DWORD MxCsr;
	WORD SegCs;
	WORD SegDs;
	WORD SegEs;
	WORD SegFs;
	WORD SegGs;
	WORD SegSs;
	DWORD EFlags;
	DWORD64 Dr0;
	DWORD64 Dr1;
	DWORD64 Dr2;
	DWORD64 Dr3;
	DWORD64 Dr6;
	DWORD64 Dr7;
	DWORD64 Rax;
	DWORD64 Rcx;
	DWORD64 Rdx;
	DWORD64 Rbx;
	DWORD64 Rsp;
	DWORD64 Rbp;
	DWORD64 Rsi;
	DWORD64 Rdi;
	DWORD64 R8;
	DWORD64 R9;
	DWORD64 R10;
	DWORD64 R11;
	DWORD64 R12;
	DWORD64 R13;
	DWORD64 R14;
	DWORD64 R15;
	DWORD64 Rip;
	union
	{
		XMM_SAVE_AREA32 FltSave;
		struct
		{
			M128A Header[2];
			M128A Legacy[8];
			M128A Xmm0;
			M128A Xmm1;
			M128A Xmm2;
			M128A Xmm3;
			M128A Xmm4;
			M128A Xmm5;
			M128A Xmm6;
			M128A Xmm7;
			M128A Xmm8;
			M128A Xmm9;
			M128A Xmm10;
			M128A Xmm11;
			M128A Xmm12;
			M128A Xmm13;
			M128A Xmm14;
			M128A Xmm15;
		};
	};
	M128A VectorRegister[26];
	DWORD64 VectorControl;
	DWORD64 DebugControl;
	DWORD64 LastBranchToRip;
	DWORD64 LastBranchFromRip;
	DWORD64 LastExceptionToRip;
	DWORD64 LastExceptionFromRip;
};

/* 67 */
struct _SID_IDENTIFIER_AUTHORITY
{
	BYTE Value[6];
};

/* 70 */
struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9
{
	WORD wProcessorArchitecture;
	WORD wReserved;
};

/* 69 */
union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F
{
	DWORD dwOemId;
	struct
	{
		WORD wProcessorArchitecture;
		WORD wReserved;
	};
};

/* 71 */
typedef void *LPVOID;

/* 72 */
typedef ULONG_PTR DWORD_PTR;

/* 68 */
struct _SYSTEM_INFO
{
	union
	{
		DWORD dwOemId;
		struct
		{
			WORD wProcessorArchitecture;
			WORD wReserved;
		};
	};
	DWORD dwPageSize;
	LPVOID lpMinimumApplicationAddress;
	LPVOID lpMaximumApplicationAddress;
	DWORD_PTR dwActiveProcessorMask;
	DWORD dwNumberOfProcessors;
	DWORD dwProcessorType;
	DWORD dwAllocationGranularity;
	WORD wProcessorLevel;
	WORD wProcessorRevision;
};

/* 73 */
struct _cpinfo
{
	UINT MaxCharSize;
	BYTE DefaultChar[2];
	BYTE LeadByte[12];
};

/* 74 */
struct _OSVERSIONINFOW
{
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	WCHAR szCSDVersion[128];
};

/* 75 */
typedef tagBITMAPINFO BITMAPINFO;

/* 78 */
struct tagBITMAPINFOHEADER
{
	DWORD biSize;
	LONG biWidth;
	LONG biHeight;
	WORD biPlanes;
	WORD biBitCount;
	DWORD biCompression;
	DWORD biSizeImage;
	LONG biXPelsPerMeter;
	LONG biYPelsPerMeter;
	DWORD biClrUsed;
	DWORD biClrImportant;
};

/* 77 */
typedef tagBITMAPINFOHEADER BITMAPINFOHEADER;

/* 80 */
struct tagRGBQUAD
{
	BYTE rgbBlue;
	BYTE rgbGreen;
	BYTE rgbRed;
	BYTE rgbReserved;
};

/* 79 */
typedef tagRGBQUAD RGBQUAD;

/* 76 */
struct tagBITMAPINFO
{
	BITMAPINFOHEADER bmiHeader;
	RGBQUAD bmiColors[1];
};

/* 81 */
typedef tagXFORM XFORM;

/* 83 */
typedef float FLOAT;

/* 82 */
struct tagXFORM
{
	FLOAT eM11;
	FLOAT eM12;
	FLOAT eM21;
	FLOAT eM22;
	FLOAT eDx;
	FLOAT eDy;
};

/* 85 */
typedef WCHAR *LPWSTR;

/* 87 */
typedef char CHAR;

/* 86 */
typedef CHAR *LPSTR;

/* 84 */
struct tagGCP_RESULTSW
{
	DWORD lStructSize;
	LPWSTR lpOutString;
	UINT *lpOrder;
	int *lpDx;
	int *lpCaretPos;
	LPSTR lpClass;
	LPWSTR lpGlyphs;
	UINT nGlyphs;
	int nMaxFit;
};

/* 88 */
typedef tagMENUITEMINFOW MENUITEMINFOW;

/* 90 */
typedef HMENU__ *HMENU;

/* 92 */
typedef HBITMAP__ *HBITMAP;

/* 89 */
struct tagMENUITEMINFOW
{
	UINT cbSize;
	UINT fMask;
	UINT fType;
	UINT fState;
	UINT wID;
	HMENU hSubMenu;
	HBITMAP hbmpChecked;
	HBITMAP hbmpUnchecked;
	ULONG_PTR dwItemData;
	LPWSTR dwTypeData;
	UINT cch;
	HBITMAP hbmpItem;
};

/* 91 */
struct HMENU__
{
	int unused;
};

/* 93 */
struct HBITMAP__
{
	int unused;
};

/* 94 */
typedef tagMENUINFO MENUINFO;

/* 95 */
typedef tagWINDOWPLACEMENT WINDOWPLACEMENT;

/* 96 */
struct tagWINDOWPLACEMENT
{
	UINT length;
	UINT flags;
	UINT showCmd;
	POINT ptMinPosition;
	POINT ptMaxPosition;
	RECT rcNormalPosition;
};

/* 97 */
struct tagMONITORINFO
{
	DWORD cbSize;
	RECT rcMonitor;
	RECT rcWork;
	DWORD dwFlags;
};

/* 98 */
struct _FILETIME
{
	DWORD dwLowDateTime;
	DWORD dwHighDateTime;
};

/* 99 */
typedef _FILETIME FILETIME;

/* 100 */
struct _SYSTEMTIME
{
	WORD wYear;
	WORD wMonth;
	WORD wDayOfWeek;
	WORD wDay;
	WORD wHour;
	WORD wMinute;
	WORD wSecond;
	WORD wMilliseconds;
};

/* 101 */
typedef GUID IID;

/* 102 */
typedef _SHFILEINFOW SHFILEINFOW;

/* 103 */
struct _SHFILEINFOW
{
	HICON hIcon;
	int iIcon;
	DWORD dwAttributes;
	WCHAR szDisplayName[260];
	WCHAR szTypeName[80];
};

/* 104 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 106 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
	DWORD LowPart;
	LONG HighPart;
};

/* 105 */
union _LARGE_INTEGER
{
	struct
	{
		DWORD LowPart;
		LONG HighPart;
	};
	_LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
	LONGLONG QuadPart;
};

/* 110 */
struct tagMOUSEINPUT
{
	LONG dx;
	LONG dy;
	DWORD mouseData;
	DWORD dwFlags;
	DWORD time;
	ULONG_PTR dwExtraInfo;
};

/* 109 */
typedef tagMOUSEINPUT MOUSEINPUT;

/* 112 */
struct tagKEYBDINPUT
{
	WORD wVk;
	WORD wScan;
	DWORD dwFlags;
	DWORD time;
	ULONG_PTR dwExtraInfo;
};

/* 111 */
typedef tagKEYBDINPUT KEYBDINPUT;

/* 114 */
struct tagHARDWAREINPUT
{
	DWORD uMsg;
	WORD wParamL;
	WORD wParamH;
};

/* 113 */
typedef tagHARDWAREINPUT HARDWAREINPUT;

/* 108 */
union tagINPUT::$72687D791E298366090936F57062F9D6
{
	MOUSEINPUT mi;
	KEYBDINPUT ki;
	HARDWAREINPUT hi;
};

/* 107 */
struct tagINPUT
{
	DWORD type;
	union
	{
		MOUSEINPUT mi;
		KEYBDINPUT ki;
		HARDWAREINPUT hi;
	};
};

/* 115 */
typedef tagPAINTSTRUCT PAINTSTRUCT;

/* 116 */
struct tagSIZE
{
	LONG cx;
	LONG cy;
};

/* 117 */
struct tagCOMPOSITIONFORM
{
	DWORD dwStyle;
	POINT ptCurrentPos;
	RECT rcArea;
};

/* 118 */
struct tagLOGFONTW
{
	LONG lfHeight;
	LONG lfWidth;
	LONG lfEscapement;
	LONG lfOrientation;
	LONG lfWeight;
	BYTE lfItalic;
	BYTE lfUnderline;
	BYTE lfStrikeOut;
	BYTE lfCharSet;
	BYTE lfOutPrecision;
	BYTE lfClipPrecision;
	BYTE lfQuality;
	BYTE lfPitchAndFamily;
	WCHAR lfFaceName[32];
};

/* 119 */
typedef _ULARGE_INTEGER ULARGE_INTEGER;

/* 121 */
struct _ULARGE_INTEGER::$0354AA9C204208F00D0965D07BBE7FAC
{
	DWORD LowPart;
	DWORD HighPart;
};

/* 120 */
union _ULARGE_INTEGER
{
	struct
	{
		DWORD LowPart;
		DWORD HighPart;
	};
	_ULARGE_INTEGER::$0354AA9C204208F00D0965D07BBE7FAC u;
	ULONGLONG QuadPart;
};

/* 123 */
typedef UINT_PTR(__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

/* 122 */
struct tagOFNW
{
	DWORD lStructSize;
	HWND hwndOwner;
	HINSTANCE hInstance;
	LPCWSTR lpstrFilter;
	LPWSTR lpstrCustomFilter;
	DWORD nMaxCustFilter;
	DWORD nFilterIndex;
	LPWSTR lpstrFile;
	DWORD nMaxFile;
	LPWSTR lpstrFileTitle;
	DWORD nMaxFileTitle;
	LPCWSTR lpstrInitialDir;
	LPCWSTR lpstrTitle;
	DWORD Flags;
	WORD nFileOffset;
	WORD nFileExtension;
	LPCWSTR lpstrDefExt;
	LPARAM lCustData;
	LPOFNHOOKPROC lpfnHook;
	LPCWSTR lpTemplateName;
	void *pvReserved;
	DWORD dwReserved;
	DWORD FlagsEx;
};

/* 124 */
typedef $C69BB3475790555A1270C1E06836585E SHELLFLAGSTATE;

/* 125 */
#pragma pack(push, 1)
struct $C69BB3475790555A1270C1E06836585E
{
	__int32 fShowAllObjects : 1;
	__int32 fShowExtensions : 1;
	__int32 fNoConfirmRecycle : 1;
	__int32 fShowSysFiles : 1;
	__int32 fShowCompColor : 1;
	__int32 fDoubleClickInWebView : 1;
	__int32 fDesktopHTML : 1;
	__int32 fWin95Classic : 1;
	__int32 fDontPrettyPath : 1;
	__int32 fShowAttribCol : 1;
	__int32 fMapNetDrvBtn : 1;
	__int32 fShowInfoTip : 1;
	__int32 fHideIcons : 1;
	__int32 fAutoCheckSelect : 1;
	__int32 fIconsOnly : 1;
	unsigned __int32 fRestFlags : 1;
};
#pragma pack(pop)

/* 126 */
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 127 */
struct _EXCEPTION_RECORD
{
	DWORD ExceptionCode;
	DWORD ExceptionFlags;
	_EXCEPTION_RECORD *ExceptionRecord;
	PVOID ExceptionAddress;
	DWORD NumberParameters;
	ULONG_PTR ExceptionInformation[15];
};

/* 129 */
typedef BYTE *LPBYTE;

/* 128 */
struct _STARTUPINFOA
{
	DWORD cb;
	LPSTR lpReserved;
	LPSTR lpDesktop;
	LPSTR lpTitle;
	DWORD dwX;
	DWORD dwY;
	DWORD dwXSize;
	DWORD dwYSize;
	DWORD dwXCountChars;
	DWORD dwYCountChars;
	DWORD dwFillAttribute;
	DWORD dwFlags;
	WORD wShowWindow;
	WORD cbReserved2;
	LPBYTE lpReserved2;
	HANDLE hStdInput;
	HANDLE hStdOutput;
	HANDLE hStdError;
};

/* 131 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 132 */
typedef _CONTEXT *PCONTEXT;

/* 130 */
struct _EXCEPTION_POINTERS
{
	PEXCEPTION_RECORD ExceptionRecord;
	PCONTEXT ContextRecord;
};

/* 133 */
typedef _iobuf FILE;

/* 134 */
struct _iobuf
{
	char *_ptr;
	int _cnt;
	char *_base;
	int _flag;
	int _file;
	int _charbuf;
	int _bufsiz;
	char *_tmpfname;
};

/* 136 */
typedef threadlocaleinfostruct *pthreadlocinfo;

/* 143 */
struct threadmbcinfostruct;

/* 142 */
typedef struct threadmbcinfostruct *pthreadmbcinfo;

/* 135 */
struct localeinfo_struct
{
	pthreadlocinfo locinfo;
	pthreadmbcinfo mbcinfo;
};

/* 139 */
struct tagLC_ID
{
	unsigned __int16 wLanguage;
	unsigned __int16 wCountry;
	unsigned __int16 wCodePage;
};

/* 138 */
typedef tagLC_ID LC_ID;

/* 140 */
struct threadlocaleinfostruct::$F0551D0CB09E7A078CAEF7CAC43D74C7
{
	char *locale;
	wchar_t *wlocale;
	int *refcount;
	int *wrefcount;
};

/* 141 */
struct __lc_time_data;

/* 137 */
struct threadlocaleinfostruct
{
	int refcount;
	unsigned int lc_codepage;
	unsigned int lc_collate_cp;
	unsigned __int32 lc_handle[6];
	LC_ID lc_id[6];
	threadlocaleinfostruct::$F0551D0CB09E7A078CAEF7CAC43D74C7 lc_category[6];
	int lc_clike;
	int mb_cur_max;
	int *lconv_intl_refcount;
	int *lconv_num_refcount;
	int *lconv_mon_refcount;
	struct threadlocaleinfostruct::lconv *lconv;
	int *ctype1_refcount;
	unsigned __int16 *ctype1;
	const unsigned __int16 *pctype;
	const unsigned __int8 *pclmap;
	const unsigned __int8 *pcumap;
	__lc_time_data *lc_time_curr;
};

/* 144 */
struct stdext::threads;

/* 145 */
struct Concurrency::details::VirtualProcessor;

/* 146 */
struct Concurrency::details::ScheduleGroupSegmentBase;

/* 147 */
struct _WIN32_FIND_DATAW
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD dwReserved0;
	DWORD dwReserved1;
	WCHAR cFileName[260];
	WCHAR cAlternateFileName[14];
};

/* 148 */
struct Concurrency::details::ContextBase;

/* 149 */
struct Concurrency::details::ResourceManager;

/* 150 */
struct Concurrency::details::_NonReentrantLock;

/* 151 */
struct std::exception;

/* 152 */
struct Concurrency::details::GlobalNode;

/* 153 */
typedef tagSCROLLINFO SCROLLINFO;

/* 154 */
struct tagSCROLLINFO
{
	UINT cbSize;
	UINT fMask;
	int nMin;
	int nMax;
	UINT nPage;
	int nPos;
	int nTrackPos;
};

/* 155 */
struct _LocaleUpdate;

/* 156 */
struct RUNTIME_FUNCTION
{
	void *__ptr32 FunctionStart;
	void *__ptr32 FunctionEnd;
	void *__ptr32 UnwindInfo;
};

/* 157 */
struct UNWIND_INFO
{
	char Ver3_Flags;
	char PrologSize;
	char CntUnwindCodes;
	char FrReg_FrRegOff;
};

/* 158 */
struct UNWIND_CODE
{
	char PrologOff;
	char OpCode_OpInfo;
};

/* 159 */
struct C_SCOPE_TABLE
{
	void *__ptr32 Begin;
	void *__ptr32 End;
	void *__ptr32 Handler;
	void *__ptr32 Target;
};

/* 160 */
struct _msEhRef
{
	int Id;
	int Cnt1;
	void *__ptr32 Tbl1;
	int Cnt2;
	void *__ptr32 Tbl2;
	int Cnt3;
	void *__ptr32 Tbl3;
	int _unk;
};

/* 161 */
struct _msEhDsc1
{
	int Mode;
	void *__ptr32 Entry;
};

/* 162 */
struct _msEhDsc2
{
	void *__ptr32 Entry;
	int Mode;
};

/* 163 */
union __declspec(align(16)) __m128i
{
	__int8 m128i_i8[16];
	__int16 m128i_i16[8];
	__int32 m128i_i32[4];
	__int64 m128i_i64[2];
	unsigned __int8 m128i_u8[16];
	unsigned __int16 m128i_u16[8];
	unsigned __int32 m128i_u32[4];
	unsigned __int64 m128i_u64[2];
};

